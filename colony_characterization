%% The Sanchez Lab at The Rowland Institute at Harvard: Petri Dish Colony Analyzer Algorithm
% by Diondra D. Peck

% The code below will read any uploaded .tiff, .jpg, .bmp, or .png image of
% bacterial colonies and 1) distinguish colonies from the petri dish or
% other stray objects, 2) count the number of colonies, 3) perform
% principal component analysis and clustering to sort the colonies into two
% groups based on physical properties, and 4) provide a numerical breakdown
% of how many colonies belong to each strain.

% total runtime: 10.923 s

I = imread('SanchezLab_Colony2.png'); % imread upload image file in ' ' - works for .tiff, .jpg, .bmp, and .png file types
figure;
subplot(2,2,1), imshow(I), title('Original Image')

z = rgb2gray(I); % converts to grayscale intensity image
H = wiener2(z); % filters to remove image noise
J = adapthisteq(H); % more filtering - performs Contrast-limited Adaptive Histogram Equalization(CLAHE) on grayscale image
subplot(2,2,2), imshow(H), title('Filtered Image')

Jbw = im2bw(J); % converts image to black and white
JBW = imcomplement(Jbw); % computes complement of black and white image
subplot(2,2,3), imshow(JBW), title('Inverted Image');

BW = imclearborder(JBW); % removes all pixels (and their connected neighbors) on the image border
BW2 = xor(bwareaopen(BW, 10), bwareaopen(BW, 12500)); % removes all objects with < 10 pixels or > 12500 pixels - this removes most of the petri dish rim

D = -bwdist(~BW2); % computes the distance transform of borderless image
L = watershed(D); % computes the watershed transform i.e. separates overlapping colonies
BW2(L == 0) = 0; % watershed ridge lines indicate when L == 0, so this step segments 
% the bw image by making those pixels = 0 (i.e. black in binary) which visually creates segments

c = bwlabeln(BW2);% returns a label matrix w/ labels for all of the connected components in BW2
objects = regionprops(BW2, z, 'Area', 'Perimeter', 'Eccentricity', 'Solidity'); % extracts the area, perimeter, and eccentricity of each connected component
table = struct2table(objects); % create a table containing the information in "objects"
writetable(table, 'data.xls'); % write this table within matlab and name it "data" - it will now be saved to the MATLAB directory folder

% create simpler variable names for each property in "objects"
objectsolidity = [objects.Solidity]; 
objectareas = [objects.Area]; 
objectperimeters = [objects.Perimeter];
objecteccentricities = [objects.Eccentricity];
objectcircularities = (4*pi*objectareas)./(objectperimeters.^2); % calculates circularity of each connected component 
allowable = (objectareas > 5 & objectcircularities > .8 & objecteccentricities < .9 & objectsolidity < 1); % filters out objects not colony-like (i.e. areas less than 5 pixels, circularities less than .8, etc.)
keeper = find(allowable); % saves all objects fitting "allowable" criteria into variable "keeper"
image = ismember(c, keeper); % reproduces image with only objects in "keeper"
BW3 = bwlabel(image, 8); % rename image as BW3
subplot(2,2,4), imshow(BW3), title('Colonies Only'); hold off

[label, NUM] = bwlabeln(BW3); % returns the number of connected components (in this case, colonies) in BW2
Message = sprintf('There are %d colonies.', NUM); 
h = msgbox(Message); % displays message box declaring the number of colonies found

objects1 = regionprops(BW3, z, 'Area','Eccentricity','Perimeter'); % extracts the area, perimeter, mean intensity, and eccentricity of each colony

t = struct2table(objects1); % creates a table with the regionprops data from "objects1"
writetable(t, 'colonyprops.xls'); % exports table as an excel spreadsheet named "colonyprops" - it will now be saved to the MATLAB directory folder

A = xlsread('colonyprops.xls'); % returns excel file as a matlab data array, "A"
[coeff,score,latent,tsquared,explained] = pca(A); % returns the principal component coefficients (coeff), score, variances (latent) , Hotelling's T-squared
% statistic (tsquared), and the % of total variance explained by each component (explained)
name = array2table(coeff,'VariableNames',{'Area' 'Eccentricity' 'Perimeter'}); 
% converts the principal component array into a table where each column is a variable
explained;

figure;
idx = kmeans(score, 2); % calls kmeans clustering algorithm to sort colonies into 2 groups based on pca score - if # of strains present is known to be other than 2, CHANGE TO APPROPRIATE NUMBER
plot(score(idx==1,1),score(idx==1,2),'b.','MarkerSize',12) % plots colonies as points based on top two principal components' scores and assigns each strain a color - strain 1 = blue, strain 2 = magenta
hold on
plot(score(idx==2,1),score(idx==2,2),'m.','MarkerSize',12)
xlabel('1st Principal Component')
ylabel('2nd Principal Component')
legend('Strain 1', 'Strain 2')
title 'Clustering Results'
hold off

strain1 = length(score(idx==1)); % finds number of colonies in strain 1
strain2 = length(score(idx==2)); % finds number of colonies in strain 2
Message = sprintf('There are %d colonies in Strain 1 and %d colonies in Strain 2.', strain1, strain2); 
h = msgbox(Message); % displays message box with number of colonies in each strain

